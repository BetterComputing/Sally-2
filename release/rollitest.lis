rollitest.asm:
     1                          ;--------------------------------------------------
     2                          ; out\ ports
     3                          ;--------------------------------------------------
     4                          ; $2x 	Printer DATA
     5                          ; $3x	Floppy Control	D7 = S/D\, D6 = HD\/S, D5 = Side, D4 = FDCRES, D3 = DSEL4, D2 = DSEL3, D1 = DSEL1, D0 = DSEL0
     6                          ; $4x	FDC 1797
     7                          ; $5x	U52 74LS259
     8                          ; 	$50	ATARI Out data
     9                          ; 	$51	RS232 TX
    10                          ; 	$52	ROM switch
    11                          ; 	$53	printer strobe
    12                          ; 	$54	reset index-pulse
    13                          ; 	$55	RS232 DTR
    14                          ; 	$56	set index pulse
    15                          ; 	$57	0=CMD,  1=SIO
    16                          ; $8x	CTC
    17                          ;--------------------------------------------------
    18                          ; in\ ports
    19                          ;--------------------------------------------------
    20                          ; $2x	Printer Control
    21                          ; $4x	FDC 1797
    22                          ; $5x	RS232	D7=RX,  D3=1,  D2=?,  D1=FlowControl
    23                          ; $70	SIO	D7=RX,  D3=RDY/+5V, D1=CMD
    24                          ;--------------------------------------------------
    25                          ;chrin		equ	00185h
    26                          ;chrout		equ	001a2h
    27                          ;printhex	equ	00229h
    28                          
    29                          		include "SALLY-CONST.asm"
SALLY-CONST.asm:
     1                          LF		equ	0ah
     2                          CR		equ	0dh
     3                          
     4                          VARS		equ	0ff80h
     5                          echo		equ	0
     6                          sum		equ	1
     7                          addr		equ	2
     8                          
     9                          ;--------------------------------------------------
    10                          ; baudrate for console-io
    11                          ; 26 =  9600 baud
    12                          ; 13 = 19200 baud
    13                          ;--------------------------------------------------
    14                          CONBAUD		equ	26
    15                          
    16                          ;--------------------------------------------------
    17                          ; 16 bytes keyboard buffer
    18                          ;--------------------------------------------------
    19                          KEYBUF		equ	0ff00h
    20                          ;--------------------------------------------------
    21                          ; FF10: Interrupt Table
    22                          ;--------------------------------------------------
    23                          TC0INTVEC	equ	0ff10h
    24                          TC1INTVEC	equ	0ff12h
    25                          TC2INTVEC	equ	0ff14h
    26                          TC3INTVEC	equ	0ff16h
    27                          
    28                          ;--------------------------------------------------
    29                          ; Out - ports equations, Disk-Control
    30                          ;--------------------------------------------------
    31                          DISKCTRL	equ	030h				;7 = S/D\, 6 = S/B\, 5 = side, 4 = RES\, 3-0 = DSEL 4-1
    32                          
    33                          ;--------------------------------------------------
    34                          ; In/Out - ports equations, WD177x FDC
    35                          ;--------------------------------------------------
    36                          FDCSTAT		equ	040h
    37                          FDCCMD		equ	040h
    38                          FDCTRK		equ	041h
    39                          FDCSEC		equ	042h
    40                          FDCDAT		equ	043h
    41                          
    42                          ;--------------------------------------------------
    43                          ; Out - ports equations, RS232, SIO, ROM, INDEX
    44                          ;--------------------------------------------------
    45                          SIOOUT		equ	050h
    46                          RS232TX		equ	051h
    47                          ROMSWITCH	equ	052h
    48                          STROBE		equ	053h
    49                          RESIDX		equ	054h
    50                          RS232DTR	equ	055h
    51                          SETIDX		equ	056h
    52                          CMDSIO		equ	057h				;0 = CMD, 1 = SIOOUT
    53                          
    54                          RS232		equ	050h
    55                          SIOIN		equ	070h
    56                          
    57                          TC0		equ	080h
    58                          TC1		equ	081h
    59                          TC2		equ	082h
    60                          TC3		equ	083h
    61                          
    62                          DDEVIC		equ	0c2fbh
    63                          DCOMND		equ	0c2fch
    64                          DAUX1		equ	0c2fdh
    65                          DAUX2		equ	0c2feh
    66                          DCHECK		equ	0c2ffh
    67                          
    68                          PERCOMBLOCKS	equ	0ff56h
    69                          
rollitest.asm:
    30                          
    31                          		org	00000h
    32                          
    33   000000 c3ff00          		jp	start
    34                          
    35                          ;--------------------------------------------------
    36                          ; conin T/C 0 (here counter) interrupt for start-bit
    37                          ;--------------------------------------------------
    38   000003 f5              coninInt:	push	af
    39   000004 3e87                 		ld	a, 87h
    40   000006 d380                 		out	(TC0), a			;set T/C 0 to 9600 Baud timer
    41   000008 3e1a            baud9600:     	ld	a, CONBAUD;01ah			;26 * 16 = 416; 4Mhz/416 = 9600 baud
    42   00000a d380                 		out	(TC0), a
    43   00000c 3e1a                 		ld	a, coninIntB & 255		;set T/C 0 interrupt to next routine
    44   00000e 3210ff               		ld	(TC0INTVEC), a
    45   000011 3e7f                 		ld	a, 7fh
    46   000013 321f00          coninInt1:	ld	(inbyte + 1), a
    47   000016 f1                   		pop	af
    48   000017 fb                   		ei
    49   000018 ed4d                 		reti
    50                          
    51   00001a f5              coninIntB:    	push	af
    52   00001b db70                 		in	a, (SIOIN)			;read RS232-	RX
    53   00001d 17                   		rla
    54   00001e 3e00            inbyte:    	ld	a, 00h				;<- set by previous routine to 7fh
    55   000020 1f                   		rra
    56   000021 38f0                 		jr	c, coninInt1			;loop 7 times
    57                          
    58   000023 3200ff          coninIntPtr:    ld	(KEYBUF), a			;store result in ff00
    59   000026 3e2f                 		ld	a, coninIntC & 255		;timer 0 interrupt vector = 0ff2c
    60   000028 3210ff          		ld	(TC0INTVEC), a
    61   00002b f1                   		pop	af
    62   00002c fb                   		ei
    63   00002d ed4d                 		reti
    64                          
    65   00002f f5              coninIntC:     	push	af
    66   000030 3ec7                 		ld	a, 0c7h				;timer 0 counter
    67   000032 d380                 		out	(TC0), a
    68   000034 3e01                 		ld	a, 01h
    69   000036 d380                 		out	(TC0), a
    70   000038 3a2400               		ld	a, (coninIntPtr + 1)
    71   00003b 3c                   		inc	a
    72   00003c e60f                 		and	0fh
    73   00003e 322400               		ld	(coninIntPtr + 1), a		;increment buffer (16 bytes)
    74   000041 3e03                 		ld	a, coninInt & 255		;reset T/C 0 interrupt to start-bit routine
    75   000043 3210ff               		ld	(TC0INTVEC), a
    76   000046 f1                   		pop	af
    77   000047 fb                   		ei
    78   000048 ed4d                 		reti
    79                          
    80                          
    81                          ;--------------------------------------------------
    82                          ; conout T/C 1 interrupt for start-bit
    83                          ;--------------------------------------------------
    84   00004a f5              conoutIntA:     push	af
    85   00004b af                   		xor	a
    86   00004c d350                 		out	(SIOOUT), a
    87   00004e 3e57                 		ld	a, conoutIntB & 255
    88   000050 3212ff               		ld	(TC1INTVEC), a
    89   000053 f1                   		pop	af
    90   000054 fb                   		ei
    91   000055 ed4d                 		reti
    92                          
    93   000057 f5              conoutIntB:	push	af
    94   000058 3e00            		ld	a, 00h
    95   00005a d350                 		out	(SIOOUT), a
    96   00005c 1f                   		rra
    97   00005d 326b00               		ld	(conoutIntC + 2), a
    98   000060 3e69                 		ld	a, conoutIntC & 255
    99   000062 3212ff               		ld	(TC1INTVEC), a
   100   000065 f1                   		pop	af
   101   000066 fb                   		ei
   102   000067 ed4d                 		reti
   103                          
   104   000069 f5              conoutIntC:	push	af
   105   00006a 3e00                 		ld	a, 00h
   106   00006c d350                 		out	(SIOOUT), a
   107   00006e 1f                   		rra
   108   00006f 327d00               		ld	(conoutIntD + 2), a
   109   000072 3e7b                 		ld	a, conoutIntD & 255
   110   000074 3212ff               		ld	(TC1INTVEC), a
   111   000077 f1                   		pop	af
   112   000078 fb                   		ei
   113   000079 ed4d                 		reti
   114                          
   115   00007b f5              conoutIntD:	push	af
   116   00007c 3e00                 		ld	a, 00h
   117   00007e d350                 		out	(SIOOUT), a
   118   000080 1f                   		rra
   119   000081 328f00               		ld	(conoutIntE + 2), a
   120   000084 3e8d                 		ld	a, conoutIntE & 255
   121   000086 3212ff               		ld	(TC1INTVEC), a
   122   000089 f1                   		pop	af
   123   00008a fb                   		ei
   124   00008b ed4d                 		reti
   125                          
   126   00008d f5              conoutIntE:	push	af
   127   00008e 3e00                 		ld	a, 00h
   128   000090 d350                 		out	(SIOOUT), a
   129   000092 1f                   		rra
   130   000093 32a100               		ld	(conoutIntF + 2), a
   131   000096 3e9f                 		ld	a, conoutIntF & 255
   132   000098 3212ff               		ld	(TC1INTVEC), a
   133   00009b f1                   		pop	af
   134   00009c fb                   		ei
   135   00009d ed4d                 		reti
   136                          
   137   00009f f5              conoutIntF:	push	af
   138   0000a0 3e00                 		ld	a, 00h
   139   0000a2 d350                 		out	(SIOOUT), a
   140   0000a4 1f                   		rra
   141   0000a5 32b300               		ld	(conoutIntG + 2), a
   142   0000a8 3eb1                 		ld	a, conoutIntG & 255
   143   0000aa 3212ff               		ld	(TC1INTVEC), a
   144   0000ad f1                   		pop	af
   145   0000ae fb                   		ei
   146   0000af ed4d                 		reti
   147                          
   148   0000b1 f5              conoutIntG:	push	af
   149   0000b2 3e00                 		ld	a, 00h
   150   0000b4 d350                 		out	(SIOOUT), a
   151   0000b6 1f                   		rra
   152   0000b7 32c500               		ld	(conoutIntH + 2), a
   153   0000ba 3ec3                 		ld	a, conoutIntH & 255
   154   0000bc 3212ff               		ld	(TC1INTVEC), a
   155   0000bf f1                   		pop	af
   156   0000c0 fb                   		ei
   157   0000c1 ed4d                 		reti
   158                          
   159   0000c3 f5              conoutIntH:	push	af
   160   0000c4 3e00                 		ld	a, 00h
   161   0000c6 d350                 		out	(SIOOUT), a
   162   0000c8 1f                   		rra
   163   0000c9 32d700               		ld	(conoutIntI + 2), a
   164   0000cc 3ed5                 		ld	a, conoutIntI & 255
   165   0000ce 3212ff               		ld	(TC1INTVEC), a
   166   0000d1 f1                   		pop	af
   167   0000d2 fb                   		ei
   168   0000d3 ed4d                 		reti
   169                          
   170   0000d5 f5              conoutIntI:	push	af
   171   0000d6 3e00                 		ld	a, 00h
   172   0000d8 d350                 		out	(SIOOUT), a
   173   0000da 3ee3                 		ld	a, conoutIntJ & 255
   174   0000dc 3212ff               		ld	(TC1INTVEC), a
   175   0000df f1                   		pop	af
   176   0000e0 fb                   		ei
   177   0000e1 ed4d                 		reti
   178                          
   179   0000e3 f5              conoutIntJ:	push	af
   180   0000e4 3e01                 		ld	a, 01h				;stop bit
   181   0000e6 d350                 		out	(SIOOUT), a
   182   0000e8 3ef1                 		ld	a, resetConout & 255
   183   0000ea 3212ff               		ld	(TC1INTVEC), a
   184   0000ed f1                   		pop	af
   185   0000ee fb                   		ei
   186   0000ef ed4d                 		reti
   187                          
   188   0000f1 f5              resetConout: 	push	af				;disable timer 1 interrupt
   189   0000f2 3e01                 		ld	a, 01h
   190   0000f4 d381                 		out	(TC1), a
   191   0000f6 3eff                 		ld	a, 0ffh
   192   0000f8 3212ff               		ld	(TC1INTVEC), a
   193   0000fb f1                   		pop	af
   194   0000fc fb                   		ei
   195   0000fd ed4d                 		reti
   196                          
   197                          ;--------------------------------------------------
   198                          ; Code executed after Reset
   199                          ;--------------------------------------------------
   200   0000ff f3              start:		di      				; disable interrupt
   201   000100 af              		xor     a				; set a to zero
   202   000101 3d              restime:	dec     a				; do 256 times nothing
   203   000102 20fd            		jr      nz, restime			; loop
   204                          
   205   000104 21cf01          		ld      hl, portval			; init 11 ports with values at 0a3h
   206   000107 060b            		ld      b, 0bh
   207   000109 4e              portinit:	ld      c, (hl)
   208   00010a 23              		inc     hl
   209   00010b eda3            		outi
   210   00010d 20fa            		jr      nz, portinit			; loop
   211                          
   212   00010f 3100c1          		ld      sp, 0c100h			; stack-pointer
   213                          
   214   000112 210000          		ld	hl, 00000h			; source
   215   000115 2282ff          		ld	(VARS + addr), hl
   216   000118 110080          		ld	de, 08000h			; dest
   217   00011b 010020          		ld	bc, 02000h
   218   00011e edb0            		ldir
   219                          
   220   000120 212601          		ld	hl, code8000
   221   000123 cbfc            		set	7, h
   222   000125 e9              		jp	(hl)
   223   000126 3e01            code8000:	ld	a, 1
   224   000128 d352            		out	(ROMSWITCH), a
   225                          
   226   00012a 210080          		ld	hl, 08000h
   227   00012d 110000          		ld	de, 00000h
   228   000130 010020          		ld	bc, 02000h
   229   000133 edb0            		ldir
   230   000135 c33801          		jp	code0000
   231                          
   232   000138 3eff            code0000:	ld      a, 0ffh				; load interrupt-vector register
   233   00013a ed47            		ld      i, a				; with 0ffh
   234   00013c ed5e            		im      2				; enable interrupt mode 2 (vectored)
   235                          
   236   00013e 3e41            		ld	a, 41h
   237   000140 d330            		out	(DISKCTRL), a
   238                          
   239   000142 cd6701               		call	init9600			;init 9600 baud send/receive
   240                          ;		call	printstack
   241                          ;		db	27,"[2J",27,"[H", "Rolli-2\n", 0
   242                          
   243   000145 c3e501          		jp	printmenu
   244                          
   245                          ;testloop1:	ld	hl, 00000h
   246                          ;		ld	de, 08000h
   247                          ;		ld	bc, 02000h
   248                          ;
   249                          ;testloop:	ld	a, (de)
   250                          ;		cp	(hl)
   251                          ;		call	nz, err
   252                          ;		inc	de
   253                          ;		inc	hl
   254                          ;		dec	bc
   255                          ;		ld	a, b
   256                          ;		or	a, c
   257                          ;		jp	nz, testloop
   258                          ;
   259                          ;;		ld	a, 255
   260                          ;;		out	(DISKCTRL), a
   261                          ;		jp	testloop1
   262                          ;
   263                          ;err:		ld	a, h
   264                          ;		call	printhex
   265                          ;		ld	a, l
   266                          ;		call	printhex
   267                          ;		jp	newline
   268                          ;
   269                          ;conloop:	call	dump
   270                          ;		call	getchar
   271                          ;		jp	conloop
   272                          ;
   273                          ;dump:		call	newline
   274                          ;		call	newline
   275                          ;
   276                          ;
   277                          ;		ld	c, 16
   278                          ;
   279                          ;dump2:		ld	b, 16
   280                          ;dump1:		ld	a, (hl)
   281                          ;		call	printhex
   282                          ;		ld	a, ' '
   283                          ;		call	putchar
   284                          ;		inc	hl
   285                          ;		djnz	dump1
   286                          ;		call	newline
   287                          ;		dec	c
   288                          ;		jr	nz, dump2
   289                          ;		ret
   290                          
   291                          
   292                          putchar:
   293                          ;		push	hl				;echo CONOUT
   294   000148 c5                  		push	bc
   295   000149 f5                   		push	af
   296   00014a 4f                   		ld	c, a
   297   00014b cdbb01               		call	conout
   298   00014e f1                   		pop	af
   299   00014f c1                   		pop	bc
   300                           ;   		pop	hl
   301   000150 c9                   		ret
   302                          
   303   000151 e3              printstack:    	ex	(sp), hl			;exchange (load) hl with stackpointer
   304   000152 7e              printstack1:	ld	a, (hl)				;load char
   305   000153 cd4801               		call	putchar				;print it
   306   000156 7e                   		ld	a, (hl)				;load it again
   307   000157 23                   		inc	hl				;increment hl
   308   000158 b7                   		or	a				;char <> 0?
   309   000159 20f7                 		jr	nz, printstack1			;loop
   310   00015b e3                   		ex	(sp), hl			;write hl back to stack
   311   00015c c9                   		ret
   312                          
   313                          
   314                          
   315   00015d e5              getchar:     	push	hl
   316   00015e c5                   		push	bc
   317   00015f cdab01               		call	conin				;CONIN in jumptable
   318   000162 c1                   		pop	bc
   319   000163 e1              		pop	hl
   320                          ;     		res	7, a				;reset parity bit
   321   000164 fe20                 		cp	20h				;char < 20h = control char?
   322   000166 c9                   		ret					;yes, return
   323                          
   324                          
   325                          ;--------------------------------------------------
   326                          ; SALLY Monitor
   327                          ;--------------------------------------------------
   328   000167 f3              init9600:	di
   329   000168 21ff00               		ld	hl, resetConout | 255		;resetConout			;point Timer 1 interrupt (send)
   330   00016b 2212ff               		ld	(TC1INTVEC), hl			;to 0f5eeh
   331   00016e 3e07                 		ld	a, 07h				;Timer 1 reset, no int
   332   000170 d381                 		out	(TC1), a			;load time constant
   333   000172 3a0900               		ld	a, (baud9600 + 1)		;01ah = 9600 Baud constant from conin
   334   000175 d381                 		out	(TC1), a
   335   000177 2100ff               		ld	hl, KEYBUF			;16-byte input buffer
   336   00017a 222400               		ld	(coninIntPtr+1), hl
   337   00017d 229e01               		ld	(coninPtr), hl
   338   000180 f3                   		di
   339   000181 3e01                 		ld	a, 01h
   340   000183 d357                 		out	(CMDSIO), a			;enable SIO-Trig
   341   000185 067e            init9600a:	ld	b, 7eh
   342   000187 db70            init9600c:	in	a, (SIOIN)			;read SIO
   343   000189 17                   		rla					;D7 (RX) to carry
   344   00018a 30f9                 		jr	nc, init9600a			;0? repeat
   345   00018c 10f9                 		djnz	init9600c			;high for 126 loops?
   346   00018e 3ec7                 		ld	a, 0c7h				;T/C 0 interrupt on, counter mode, falling edge (start bit)
   347   000190 d380                 		out	(TC0), a
   348   000192 3e01                 		ld	a, 01h				;T/C 0, count just 1
   349   000194 d380                 		out	(TC0), a
   350   000196 210300               		ld	hl, coninInt			;set T/C 0 int to 0f500h
   351   000199 2210ff               		ld	(TC0INTVEC), hl
   352   00019c fb                   		ei
   353   00019d c9                   		ret
   354                          
   355                          
   356   00019e 0000            coninPtr:	dw	0h
   357                          
   358                          ;--------------------------------------------------
   359                          ; const, is input from SIO ready?
   360                          ;--------------------------------------------------
   361                          ;f635:
   362   0001a0 219e01          const:     	ld	hl, coninPtr
   363   0001a3 3a2400               		ld	a, (coninIntPtr + 1)
   364   0001a6 be                   		cp	(hl)
   365   0001a7 c8                   		ret	z
   366                          
   367   0001a8 3eff                 		ld	a, 0ffh
   368   0001aa c9                   		ret
   369                          
   370                          ;--------------------------------------------------
   371                          ; conin
   372                          ;--------------------------------------------------
   373   0001ab cda001          conin:		call	const				;0f635h
   374   0001ae 28fb                 		jr	z, conin			;input available?
   375   0001b0 2a9e01               		ld	hl, (coninPtr)			;read from buffer
   376   0001b3 7e                   		ld	a, (hl)
   377   0001b4 2c                   		inc	l				;increment buffer pointer
   378   0001b5 cba5                 		res	4, l				;wrap at 16 bytes
   379   0001b7 229e01               		ld	(coninPtr), hl
   380   0001ba c9                   		ret
   381                          
   382                          ;f650:
   383   0001bb 3a12ff          conout:		ld	a, (TC1INTVEC)
   384   0001be 3c                   		inc	a				;resetConout & 255
   385   0001bf 20fa                 		jr	nz, conout			; (-07h)
   386   0001c1 79                   		ld	a, c
   387                          ;     		and	7fh
   388                          ;    		jp	po, conout1			;set parity
   389                          ;   		or	80h
   390   0001c2 325900          conout1:     	ld	(conoutIntB + 2), a		;set byte to output
   391   0001c5 3e4a                 		ld	a, conoutIntA & 255		;set conout interrupt
   392   0001c7 3212ff               		ld	(TC1INTVEC), a
   393   0001ca 3e81                 		ld	a, 81h				;enable timer 1 int
   394   0001cc d381                 		out	(TC1), a
   395   0001ce c9                   		ret
   396                          
   397                          
   398                          ;--------------------------------------------------
   399                          ; 11 times port:value
   400                          ;--------------------------------------------------
   401   0001cf 5001            portval:	db	050h, 001h			;Bit0	set ATARI DATA
   402   0001d1 5101            		db	051h, 001h			;Bit1	set RS232 TX		051h fake!
   403   0001d3 8003            		db	080h, 003h			;CTC	Channel 0 reset
   404   0001d5 8010            		db 	080h, 010h			;CTC	Channel 0 interrupt vector
   405   0001d7 8107            		db	081h, 007h			;CTC	Channel 1 reset + set time constant
   406   0001d9 8101            		db	081h, 001h			;CTC	Channel 1 time contant
   407   0001db 8203            		db	082h, 003h			;CTC	Channel 2 reset
   408   0001dd 8303            		db	083h, 003h			;CTC	Channel 3 reset
   409   0001df 5701            		db	057h, 001h			;Bit7	CMDSIO = SIO
   410   0001e1 3040            		db	030h, 040h			;DSE	Floppy Control (74LS273)
   411   0001e3 40d0            		db	040h, 0d0h			;DWR/DRW	FDC read-write	d0 = force int (with no interrupt)
   412                          
   413                          		include "sallytest.asm"
sallytest.asm:
     1                          ;--------------------------------------------------------------
     2                          ; print menu
     3                          ; print prompt
     4                          ; read upper key
     5                          ; check if key is found in menukey
     6                          ; read jmp-address and jump to subroutine
     7                          ;--------------------------------------------------------------
     8   0001e5 3e01            printmenu:	ld	a, 1
     9   0001e7 3280ff          		ld	(VARS + echo), a
    10   0001ea dd2180ff        		ld	ix, VARS
    11                          
    12   0001ee 212a04          		ld      HL, menutext
    13   0001f1 cd7003          		call	printstr
    14                          
    15                          printprompt:
    16   0001f4 cdb103          		call	newline
    17   0001f7 0e3e            		ld	c, '>'
    18   0001f9 cd8603          		call	printaddr
    19                          
    20                          enterkey:
    21   0001fc 0e00            		ld	c, 0			;offset in jumptable
    22   0001fe 211104          		ld	hl, menukey		;number auf keys
    23   000201 46              		ld	b, (hl)			;in b
    24   000202 23              		inc	hl
    25   000203 cdc303          		call	getupper		;read upper key
    26                          ;		call	printhex
    27                          enterkey2:
    28   000206 be              		cp	(HL)			;key found?
    29   000207 2807            		jr	Z, enterkey1		;yes ==>
    30   000209 23              		inc	HL
    31   00020a 0c              		inc	c
    32   00020b 0c              		inc	c
    33   00020c 10f8            		djnz	enterkey2		;decrease b and jump
    34   00020e 18ec            		jr	enterkey
    35                          enterkey1:
    36   000210 0600            		ld	b, 0			;add offset in BC
    37   000212 211a04          		ld	HL, menutab		;to base
    38   000215 09              		add	HL, BC
    39   000216 01f401          		ld	BC, printprompt		;push return-address
    40   000219 c5              		push	BC
    41   00021a 5e              		ld	e, (HL)			;load jp address in DE
    42   00021b 23              		inc	HL
    43   00021c 56              		ld	d, (HL)
    44   00021d eb              		ex	DE, HL			;in HL now
    45   00021e e9              		jp	(HL)
    46                          
    47                          ;--------------------------------------------------------------
    48                          ; jump to printmenu
    49                          ;--------------------------------------------------------------
    50                          questionmark:
    51   00021f c1              		pop	BC
    52   000220 c3e501          		jp	printmenu
    53                          
    54                          ;--------------------------------------------------------------
    55                          ; jump to (addr)
    56                          ;--------------------------------------------------------------
    57   000223 2a82ff          goto:		ld	HL, (VARS + addr)
    58   000226 e9              		jp	(HL)
    59                          
    60                          ;--------------------------------------------------------------
    61                          ; Disassemble 22 lines starting from (addr)
    62                          ;--------------------------------------------------------------
    63                          disass:
    64   000227 0616            		ld	B, 22
    65   000229 ed5b82ff        		ld	DE, (VARS + addr)
    66   00022d cdb103          		call	newline
    67                          disass1:
    68   000230 c5              		push	BC
    69   000231 cd6005          		call	DISASM
    70   000234 cdb103          		call	newline
    71   000237 c1              		pop	BC
    72   000238 10f6            		djnz	disass1
    73                          
    74   00023a ed5382ff        		ld	(VARS + addr), DE	;save new address
    75   00023e c9              		ret
    76                          
    77                          ;--------------------------------------------------------------
    78                          ; change a byte in (addr)
    79                          ;--------------------------------------------------------------
    80                          changebyte:
    81   00023f 2a82ff          		ld	HL, (VARS + addr)
    82   000242 7e              		ld	a, (HL)
    83   000243 cd9503          		call	printhex
    84   000246 3e3a            		ld	a, ':'
    85   000248 cd4801          		call	putchar
    86   00024b cd3d03          		call	gethexbyte
    87   00024e 77              		ld	(HL), a
    88   00024f c9              		ret
    89                          
    90                          ;--------------------------------------------------------------
    91                          ;
    92                          ;--------------------------------------------------------------
    93                          fillmem:
    94   000250 21ff03          		ld	HL, filltext
    95   000253 cd7003          		call	printstr
    96                          
    97   000256 cd3d03          		call	gethexbyte		;get from-addr
    98   000259 67              		ld	h, a
    99   00025a cd3d03          		call	gethexbyte
   100   00025d 6f              		ld	l, a
   101   00025e e5              		push	HL
   102   00025f e5              		push	HL
   103                          
   104   000260 21f403          		ld	HL, lentext
   105   000263 cd7003          		call	printstr
   106   000266 cd3d03          		call	gethexbyte		;get length
   107   000269 47              		ld	b, a
   108   00026a cd3d03          		call	gethexbyte
   109   00026d 4f              		ld	c, a
   110                          
   111   00026e 78              		ld	a, b			; if BC = 0
   112   00026f b1              		or	a, c
   113   000270 c8              		ret	Z			; return
   114   000271 0b              		dec	BC
   115                          
   116   000272 210a04          		ld	HL, withtext
   117   000275 cd7003          		call	printstr
   118   000278 cd3d03          		call	gethexbyte
   119                          
   120   00027b d1              		pop	DE			; DE = HL + 1
   121   00027c 13              		inc	DE
   122                          
   123   00027d e1              		pop	HL
   124   00027e 77              		ld	(HL), a
   125                          
   126   00027f 78              		ld	a, b
   127   000280 b1              		or	a, c
   128   000281 c8              		ret	Z
   129                          
   130   000282 edb0            		LDIR
   131                          
   132   000284 c9              		ret
   133                          
   134                          ;--------------------------------------------------------------
   135                          ;
   136                          ;--------------------------------------------------------------
   137                          transfer:
   138   000285 21e503          		ld	HL, transtext
   139   000288 cd7003          		call	printstr
   140                          
   141   00028b cd3d03          		call	gethexbyte		;get from-addr
   142   00028e 67              		ld	h, a
   143   00028f cd3d03          		call	gethexbyte
   144   000292 6f              		ld	l, a
   145   000293 e5              		push	HL
   146                          
   147   000294 21f403          		ld	HL, lentext
   148   000297 cd7003          		call	printstr
   149   00029a cd3d03          		call	gethexbyte		;get length
   150   00029d 47              		ld	b, a
   151   00029e cd3d03          		call	gethexbyte
   152   0002a1 4f              		ld	c, a
   153                          
   154   0002a2 21fa03          		ld	HL, totext
   155   0002a5 cd7003          		call	printstr
   156   0002a8 cd3d03          		call	gethexbyte		;get dest-addr
   157   0002ab 57              		ld	d, a
   158   0002ac cd3d03          		call	gethexbyte
   159   0002af 5f              		ld	e, a
   160                          
   161   0002b0 e1              		pop	HL
   162                          
   163   0002b1 edb0            		LDIR
   164                          
   165   0002b3 c9              		ret
   166                          
   167                          ;--------------------------------------------------------------
   168                          ; read new address from getchar
   169                          ;--------------------------------------------------------------
   170                          newaddress:
   171   0002b4 21dc03          		ld	HL, addrtext
   172   0002b7 cd7003          		call	printstr
   173   0002ba cd3d03          		call	gethexbyte
   174   0002bd 3283ff          		ld	(VARS + addr + 1), a
   175   0002c0 cd3d03          		call	gethexbyte
   176   0002c3 3282ff          		ld	(VARS + addr), a
   177   0002c6 c9              		ret
   178                          
   179                          ;--------------------------------------------------------------
   180                          ; dump 256 bytes starting from (HL)
   181                          ;--------------------------------------------------------------
   182                          dumpmem:
   183   0002c7 cdb103          		call	newline
   184   0002ca 1610            		ld	d, 16
   185   0002cc 2a82ff          		ld	HL, (VARS + addr)
   186                          
   187                          dumpline:
   188   0002cf 0e3a            		ld	c, ':'
   189   0002d1 cd8603          		call	printaddr
   190                          
   191   0002d4 cdbb03          		call	space
   192   0002d7 e5              		push	HL
   193                          
   194   0002d8 0610            		ld	b, 16
   195                          dumpmem1:
   196   0002da 7e              		ld	a, (HL)
   197   0002db 23              		inc	HL
   198   0002dc cd9503          		call	printhex
   199   0002df cdbb03          		call	space
   200   0002e2 78              		ld	a, b
   201   0002e3 fe09            		cp	9
   202   0002e5 2003            		jr	NZ, dumpmem3
   203   0002e7 cdbb03          		call	space
   204                          dumpmem3:
   205   0002ea 10ee            		djnz	dumpmem1
   206                          
   207                          
   208   0002ec 3e7c            		ld	a, '|'
   209   0002ee cd4801          		call	putchar
   210   0002f1 0610            		ld	b, 16
   211   0002f3 e1              		pop	HL
   212                          
   213                          dumpmem5:
   214   0002f4 7e              		ld	a, (HL)
   215   0002f5 23              		inc	HL
   216   0002f6 fe20            		cp	32
   217   0002f8 3804            		jr	C, dumpmem6
   218   0002fa fe7e            		cp	126
   219   0002fc 3802            		jr	C, dumpmem4
   220                          dumpmem6:
   221   0002fe 3e2e            		ld	a, '.'
   222                          dumpmem4:
   223                          ;		ld	c, a
   224   000300 cd4801          		call	putchar
   225   000303 10ef            		djnz	dumpmem5
   226                          
   227   000305 3e7c            		ld	a, '|'
   228   000307 cd4801          		call	putchar
   229                          
   230   00030a cdb103          		call	newline
   231   00030d 2282ff          		ld	(VARS + addr), hl
   232   000310 15              		dec	d
   233   000311 20bc            		jr	NZ, dumpline
   234   000313 c9              		ret
   235                          
   236                          ;--------------------------------------------------------------
   237                          ; binary download to 0f000h
   238                          ;--------------------------------------------------------------
   239   000314 2100f0          download:	ld	hl, 0f000h
   240   000317 2282ff          		ld	(VARS + addr), hl
   241                          
   242   00031a cd2203          download1:	call	rs232in
   243   00031d 77              		ld	(hl), a				;7
   244   00031e 23              		inc	hl				;6
   245   00031f c31a03          		jp	download1			;10
   246                          
   247   000322 db50            rs232in:	in	a, (RS232)			;11	bit 7, wait for start-bit (0)
   248   000324 17              		rla					;4
   249   000325 38fb            		jr	c, rs232in			;12/7	22
   250   000327 00              		nop
   251   000328 00              		nop
   252   000329 1608            		ld	d, 8
   253   00032b 0616            		ld	b, 22				;7
   254   00032d 10fe            		djnz	ASMPC				;13/8
   255   00032f db50            rs232in1:	in	a, (RS232)			;11
   256   000331 17              		rla					;4
   257   000332 cb19            		rr	c				;8
   258   000334 060d            		ld	b, 13				;7
   259   000336 10fe            		djnz	ASMPC				;13
   260   000338 15              		dec	d				;4
   261   000339 20f4            		jr	nz, rs232in1			;12/7
   262   00033b 79              		ld	a, c				;4
   263   00033c c9              		ret
   264                          
   265                          
   266                          ;--------------------------------------------------------------
   267                          ; gethexbyte
   268                          ; returns 00-FF in A
   269                          ; uses E
   270                          ;--------------------------------------------------------------
   271                          gethexbyte:
   272   00033d d5              		push	DE
   273   00033e cd5403          		call	getnibble
   274   000341 07              		rlca
   275   000342 07              		rlca
   276   000343 07              		rlca
   277   000344 07              		rlca
   278   000345 5f              		ld	e, a
   279   000346 cd5403          		call	getnibble
   280   000349 b3              		or	e
   281   00034a 5f              		ld	e, a
   282   00034b dd8601          		add	a, (IX + sum)
   283   00034e 3281ff          		ld	(VARS + sum), a
   284   000351 7b              		ld	a, e
   285   000352 d1              		pop	DE
   286   000353 c9              		ret
   287                          
   288                          
   289                          ;--------------------------------------------------------------
   290                          ; calls getchar
   291                          ; returns 0-F in A
   292                          ;--------------------------------------------------------------
   293                          getnibble:
   294   000354 cd5d01          		call	getchar
   295   000357 f5              		push	AF
   296   000358 3a80ff          		ld	a, (VARS + echo)
   297   00035b b7              		or	a
   298   00035c 2807            		jr	Z, getnibble2
   299   00035e f1              		pop	AF
   300   00035f f5              		push	AF
   301   000360 c5              		push	BC
   302                          ;		ld	c, a
   303   000361 cd4801          		call	putchar
   304   000364 c1              		pop	BC
   305                          getnibble2:
   306   000365 f1              		pop	AF
   307   000366 d630            		sub	'0'
   308   000368 fe0a            		cp	10		; < 10 ?
   309   00036a d8              		ret	C		; yes, return
   310   00036b e6df            		and	11011111b	; make uppercase
   311   00036d d607            		sub	7
   312   00036f c9              		ret
   313                          
   314                          ;--------------------------------------------------------------
   315                          ; print text in (HL) uses
   316                          ; A
   317                          ;--------------------------------------------------------------
   318                          printstr:
   319   000370 c5              		push	bc
   320                          printstr2:
   321   000371 7e              		ld	a, (HL)
   322   000372 23              		inc	HL
   323   000373 b7              		or	a
   324   000374 280e            		jr	z, printstr1
   325   000376 cd4801          		call	putchar
   326   000379 fe0d            		cp	CR
   327   00037b 20f4            		jr	NZ, printstr2
   328   00037d 3e0a            		ld	a, LF
   329   00037f cd4801          		call	putchar
   330   000382 18ed            		jr	printstr2
   331                          printstr1:
   332   000384 c1              		pop	bc
   333   000385 c9              		ret
   334                          
   335                          ;--------------------------------------------------------------
   336                          ;
   337                          ;--------------------------------------------------------------
   338   000386 2a82ff          printaddr:	ld	hl, (VARS + addr)
   339   000389 cd9003          		call	printhl
   340   00038c 79              		ld	a, c
   341   00038d c34801          		jp	putchar
   342                          
   343                          ;--------------------------------------------------------------
   344                          ;
   345                          ;--------------------------------------------------------------
   346                          printhl:
   347   000390 7c              		ld	a, h
   348   000391 cd9503          		call	printhex
   349   000394 7d              		ld	a, l
   350                          
   351                          ;--------------------------------------------------------------
   352                          ; prints byte in A in hexadecimal format
   353                          ;--------------------------------------------------------------
   354   000395 f5              printhex:	push    af
   355   000396 f5              		push    af
   356   000397 1f              		rra
   357   000398 1f              		rra
   358   000399 1f              		rra
   359   00039a 1f              		rra
   360   00039b cda403          		call    printnib
   361   00039e f1              		pop     af
   362   00039f cda403          		call    printnib
   363   0003a2 f1              		pop     af
   364   0003a3 c9              		ret
   365                          printnib:
   366   0003a4 e60f            		and     0fh
   367   0003a6 c630            		add     '0'
   368   0003a8 fe3a            		cp      '9' + 1
   369   0003aa 3802            		jr      c, print
   370   0003ac c607            		add     7
   371   0003ae c34801          print:		jp    	putchar
   372                          
   373                          newline:
   374   0003b1 3e0d            		ld      a, CR
   375   0003b3 cd4801          		call    putchar
   376   0003b6 3e0a            		ld      a, LF
   377   0003b8 c34801          		jp    	putchar
   378                          
   379                          space:
   380   0003bb f5              		push	af
   381   0003bc 3e20            		ld	a, ' '
   382   0003be cd4801          		call	putchar
   383   0003c1 f1              		pop	af
   384   0003c2 c9              		ret
   385                          
   386                          getupper:
   387   0003c3 cd5d01          		call	getchar
   388   0003c6 fe61            		cp	'a'
   389   0003c8 d8              		ret	c
   390   0003c9 d620            		sub	32
   391   0003cb c9              		ret
   392                          
   393   0003cc 646f776e6c6f6164downtext:	DB	"downloading...", CR, 0
                696e672e2e2e0d00
   394                          ;downendtext:	DB	"finished.", CR, 0
   395   0003dc 616464726573733aaddrtext:	DB	"address:", 0
                00              
   396                          ;errortext:	DB	"error!", 0
   397   0003e5 7472616e73666572transtext:	DB	"transfer from:", 0
                2066726f6d3a00  
   398   0003f4 206c656e3a00    lentext:	DB	" len:", 0
   399   0003fa 20746f3a00      totext:		DB	" to:", 0
   400   0003ff 66696c6c2066726ffilltext:	DB	"fill from:", 0
                6d3a00          
   401   00040a 20776974683a00  withtext:	DB	" with:", 0
   402                          ;disktext:	DB	"enter disk number (0-9):",0
   403                          ;filetext:	DB	CR, "filename:",0
   404                          menukey:
   405   000411 08              		DB	8
   406   000412 3f434446474c4d4e		DB	"?CDFGLMN"
   407                          
   408                          menutab:
   409   00041a 1f02            		DW	questionmark
   410   00041c 3f02            		DW	changebyte
   411   00041e 1403            		DW	download
   412                          ;		DW	closedisk
   413   000420 5002            		DW	fillmem
   414   000422 2302            		DW	goto
   415   000424 2702            		DW	disass
   416   000426 c702            		DW	dumpmem
   417   000428 b402            		DW	newaddress
   418                          ;		DW	opendisk
   419                          ;		DW	cpm
   420                          ;		DW	transfer
   421                          ;		DW	vt102
   422                          ;		DW	exit
   423                          menutext:
   424   00042a 201b5b6d0d      		DB	32, 27, "[m", CR
   425   00042f 2a2a2a2a2a2a2a2a		DB	"***************************************************", CR
                2a2a2a2a2a2a2a2a
                2a2a2a2a2a2a2a2a
                2a2a2a2a2a2a2a2a
                2a2a2a2a2a2a2a2a
                2a2a2a2a2a2a2a2a
                2a2a2a0d        
   426   000463 2a2a2a20205a3830		DB	"***  Z80 ", 27, "[1mRolli-1", 27, "[m Monitor (c) '22  by ", 27, "[1mR. Scholz", 27,"[m  ***", CR
                201b5b316d526f6c
                6c692d311b5b6d20
                4d6f6e69746f7220
                2863292027323220
                206279201b5b316d
                522e205363686f6c
                7a1b5b6d20202a2a
                2a0d            
   427   0004a5 2a2a2a2a2a2a2a2a		DB	"***************************************************", CR
                2a2a2a2a2a2a2a2a
                2a2a2a2a2a2a2a2a
                2a2a2a2a2a2a2a2a
                2a2a2a2a2a2a2a2a
                2a2a2a2a2a2a2a2a
                2a2a2a0d        
   428   0004d9 3f202d2054686973		DB	"? - This text", CR
                20746578740d    
   429   0004e7 43202d204368616e		DB	"C - Change byte", CR
                676520627974650d
   430   0004f7 44202d20446f776e		DB	"D - Download to 0f000h", CR
                6c6f616420746f20
                3066303030680d  
   431                          ;		DB	"E - Close Disk", CR
   432   00050e 46202d2046696c6c		DB	"F - Fill memory", CR
                206d656d6f72790d
   433   00051e 47202d20476f746f		DB	"G - Goto address", CR
                2061646472657373
                0d              
   434   00052f 4c202d2044697361		DB	"L - Disassemble", CR
                7373656d626c650d
   435   00053f 4d202d204d656d6f		DB	"M - Memory dump", CR
                72792064756d700d
   436   00054f 4e202d204e657720		DB	"N - New address", CR
                616464726573730d
   437                          ;		DB	"O - Open Disk", CR
   438                          ;		DB	"P - CP/M", CR
   439                          ;		DB	"T - Transfer memory", CR
   440                          ;		DB	"V - VT102 test", CR
   441                          ;		DB	"X - eXit", CR
   442   00055f 00              		DB	0
   443                          
   444                          
   445                          		include "C:\github\FABIAN\src\disz80.asm"
C:/github/FABIAN/src/disz80.asm:
     1                          
     2                          
     3                          ;	SECTION	code_clib
     4                          ;	PUBLIC	disz80
     5                          ;	PUBLIC	_disz80
     6                          ;	EXTERN	fputc_cons
     7                          
     8                          ;fputc_cons	equ	conout
     9                          
    10                          ;  This code is been found in a ZX Spectrum tool called UTILITY3 v1.3
    11                          
    12                          
    13                          ;.disz80
    14                          ;._disz80
    15                          ;	pop	hl
    16                          ;	pop	bc
    17                          ;	pop	de
    18                          ;	push	de
    19                          ;	push	bc
    20                          ;	push	hl
    21                          ;	push	ix	;save callers ix
    22                          ;
    23                          ;	ld	a,d	;Supplying -1 as the address means we disassemble the following opcode
    24                          ;	and	e
    25                          ;	inc	a
    26                          ;	jr	nz,dizloop
    27                          ;	ld	hl,2
    28                          ;	add	hl,sp
    29                          ;	ld	e,(hl)
    30                          ;	inc	hl
    31                          ;	ld	d,(hl)
    32                          ;
    33                          ;.dizloop
    34                          ;	push	bc
    35                          ;	call	DISASM
    36                          ;	pop	bc
    37                          ;	ld	a,13
    38                          ;	call	CHROP
    39                          ;	ld	a,10
    40                          ;	call	CHROP
    41                          ;	dec	bc
    42                          ;	ld	a,b
    43                          ;	or	c
    44                          ;	jr	nz,dizloop
    45                          ;	ld	h,d	;Address of next instruction
    46                          ;	ld	l,e
    47                          ;	pop	ix	;restore callers ix
    48                          ;	ret
    49                          
    50                          ; ====================
    51                          ; DIS-Z80 was published in the SUBSET column of Personal Computer World 1987.
    52                          ; The routine disassembles a single Z80 instruction at address DE.
    53                          ; It is required to be followed by a routine called CHROP that outputs a
    54                          ; single ASCII character.
    55                          ; It was originally developed for CP/M on an Amstrad CPC128.
    56                          
    57                          ; The original ORG was $0100. I have added $5000 to all addresses.
    58                          ; The stated aim was to write a Z80 disassembly routine in as short a space
    59                          ; as possible and, at just over 1K (1090 bytes), it is a rather incredible
    60                          ; program.
    61                          
    62                          ; The SUBSET editor David Barrow was able to trim only one byte from John
    63                          ; Kerr's compact code. I've forgotten where so there's a challenge.
    64                          ; ====================
    65                          
    66   000560 cd8709          .DISASM	CALL 	ADRSP
    67   000563 010009                 	LD 	BC,$0900
    68   000566 212020                 	LD 	HL,$2020
    69                          
    70   000569 e5              .BUFFER	PUSH 	HL
    71   00056a 10fd                   	DJNZ 	BUFFER
    72   00056c 60                     	LD 	H,B
    73   00056d 69                     	LD 	L,C
    74   00056e 39                     	ADD 	HL,SP
    75                          
    76   00056f c5                     	PUSH 	BC
    77   000570 dde3                   	EX 	(SP),IX
    78   000572 c5                     	PUSH 	BC
    79   000573 c5                     	PUSH 	BC
    80   000574 dd39                   	ADD 	IX,SP
    81                          
    82   000576 e5                     	PUSH 	HL
    83   000577 21f106                 	LD 	HL,GROUP3
    84                          
    85   00057a cd7c09          .TRYNDX	CALL 	FETCH
    86                          
    87   00057d 41                     	LD 	B,C
    88   00057e feed                   	CP 	$ED
    89   000580 280a                   	JR 	Z,CONFLG
    90                          
    91   000582 04                     	INC 	B
    92   000583 fedd                   	CP 	$DD
    93   000585 2805                   	JR 	Z,CONFLG
    94                          
    95   000587 04                     	INC 	B
    96   000588 fefd                   	CP 	$FD
    97   00058a 2008                   	JR 	NZ,NOTNDX
    98                          
    99   00058c dd7001          .CONFLG	LD 	(IX+1),B
   100   00058f 04                     	INC 	B
   101   000590 10e8                   	DJNZ 	TRYNDX
   102                          
   103   000592 182a                   	JR 	NXBYTE
   104                          
   105   000594 4f              .NOTNDX	LD 	C,A
   106   000595 dd7e01                 	LD 	A,(IX+1)
   107   000598 b7                     	OR 	A
   108   000599 2818                   	JR 	Z,NODISP
   109                          
   110   00059b 79                     	LD 	A,C
   111   00059c fecb                   	CP 	$CB
   112   00059e 280d                   	JR 	Z,GETDIS
   113                          
   114   0005a0 e644                   	AND 	$44
   115   0005a2 fe04                   	CP 	4
   116   0005a4 2807                   	JR 	Z,GETDIS
   117                          
   118   0005a6 79                     	LD 	A,C
   119   0005a7 e6c0                   	AND 	$C0
   120   0005a9 fe40                   	CP 	$40
   121   0005ab 2006                   	JR 	NZ,NODISP
   122                          
   123   0005ad cd7c09          .GETDIS	CALL 	FETCH
   124   0005b0 dd7702                 	LD 	(IX+2),A
   125                          
   126   0005b3 214906          .NODISP	LD 	HL,GROUP1
   127   0005b6 79                     	LD 	A,C
   128   0005b7 fecb                   	CP 	$CB
   129   0005b9 2007                   	JR 	NZ,NEWMSK
   130                          
   131   0005bb 212e06                 	LD 	HL,GROUP2
   132                          
   133   0005be cd7c09          .NXBYTE	CALL 	FETCH
   134   0005c1 4f                     	LD 	C,A
   135                          
   136   0005c2 7e              .NEWMSK	LD 	A,(HL)
   137   0005c3 b7                     	OR 	A
   138   0005c4 2816                   	JR 	Z,TABEND
   139                          
   140   0005c6 a1                     	AND 	C
   141   0005c7 23                     	INC 	HL
   142                          
   143   0005c8 46              .NEWMOD	LD 	B,(HL)
   144   0005c9 23                     	INC 	HL
   145   0005ca 04                     	INC 	B
   146   0005cb 28f5                   	JR 	Z,NEWMSK
   147                          
   148   0005cd be              .TRYMAT	CP 	(HL)
   149   0005ce 23                     	INC 	HL
   150   0005cf 2807                   	JR 	Z,GETNDX
   151                          
   152   0005d1 cb7e                   	BIT 	7,(HL)
   153   0005d3 23                     	INC 	HL
   154   0005d4 28f7                   	JR 	Z,TRYMAT
   155                          
   156   0005d6 18f0                   	JR 	NEWMOD
   157                          
   158   0005d8 7e              .GETNDX	LD 	A,(HL)
   159   0005d9 e67f                   	AND 	$7F
   160   0005db 05                     	DEC 	B
   161                          
   162   0005dc e1              .TABEND	POP 	HL
   163   0005dd d5                     	PUSH 	DE
   164   0005de e5                     	PUSH 	HL
   165                          
   166   0005df eb                     	EX 	DE,HL
   167   0005e0 214707                 	LD 	HL,MONICS
   168   0005e3 cd6709                 	CALL 	XTRACT
   169                          
   170   0005e6 e1                     	POP 	HL
   171   0005e7 110500                 	LD 	DE,5
   172   0005ea 19                     	ADD 	HL,DE
   173   0005eb d1                     	POP 	DE
   174                          
   175   0005ec 78                     	LD 	A,B
   176   0005ed e6f0                   	AND 	$F0
   177   0005ef 2813                   	JR 	Z,SECOND
   178                          
   179   0005f1 1f                     	RRA
   180   0005f2 1f                     	RRA
   181   0005f3 1f                     	RRA
   182   0005f4 1f                     	RRA
   183   0005f5 c5                     	PUSH 	BC
   184                          
   185   0005f6 47                     	LD 	B,A
   186   0005f7 79                     	LD 	A,C
   187   0005f8 cd1708                 	CALL 	OPRND1
   188                          
   189   0005fb c1                     	POP 	BC
   190   0005fc 78                     	LD 	A,B
   191   0005fd e60f                   	AND 	$0F
   192   0005ff 280b                   	JR 	Z,OPDONE
   193                          
   194   000601 362c                   	LD 	(HL),44  		;,
   195   000603 23                     	INC 	HL
   196                          
   197   000604 78              .SECOND	LD 	A,B
   198   000605 e60f                   	AND 	$0F
   199                          
   200   000607 47                     	LD 	B,A
   201   000608 79                     	LD 	A,C
   202   000609 c41d08                 	CALL 	NZ,OPRND2
   203                          
   204   00060c 3e03            .OPDONE	LD 	A,3
   205   00060e dd9600                 	SUB 	(IX+0)
   206                          
   207   000611 e1                     	POP 	HL
   208   000612 e1                     	POP 	HL
   209   000613 dde1                   	POP 	IX
   210                          
   211   000615 380c                   	JR 	C,OUTEXT
   212                          
   213   000617 3c                     	INC 	A
   214   000618 47                     	LD 	B,A
   215   000619 80                     	ADD 	A,B
   216   00061a 80                     	ADD 	A,B
   217   00061b 47                     	LD 	B,A
   218                          
   219   00061c 3e20            .SPACES	LD 	A,$20
   220   00061e cda309                 	CALL 	CHROP
   221   000621 10f9                   	DJNZ 	SPACES
   222                          
   223   000623 0612            .OUTEXT	LD 	B,18
   224                          
   225   000625 3b              .PUTOUT	DEC 	SP
   226   000626 e1                     	POP 	HL
   227   000627 7c                     	LD 	A,H
   228   000628 cda309                 	CALL 	CHROP
   229   00062b 10f8                   	DJNZ 	PUTOUT
   230                          
   231   00062d c9                     	RET
   232                          
   233                          ;***********************
   234                          
   235   00062e c03640          .GROUP2	defb 	$C0,$36,$40
   236   000631 04802dc0be      	defb 	$04,$80,$2D,$C0,$BE
   237   000636 fff8060033      	defb 	$FF,$F8,$06,$00,$33
   238   00063b 0838103518      	defb 	$08,$38,$10,$35,$18
   239   000640 3a203f2840      	defb 	$3A,$20,$3F,$28,$40
   240   000645 300038c1        	defb 	$30,$00,$38,$C1
   241                          
   242                          
   243   000649 ff0000          .GROUP1	defb 	$FF,$00,$00
   244   00064c 2407320f37      	defb 	$24,$07,$32,$0F,$37
   245   000651 17311f3627      	defb 	$17,$31,$1F,$36,$27
   246   000656 0d2f0b373d      	defb 	$0D,$2F,$0B,$37,$3D
   247   00065b 3f067614c9      	defb 	$3F,$06,$76,$14,$C9
   248   000660 30d912f30f      	defb 	$30,$D9,$12,$F3,$0F
   249   000665 fb9172c602      	defb 	$FB,$91,$72,$C6,$02
   250   00066a ce01debc02      	defb 	$CE,$01,$DE,$BC,$02
   251   00066f d642e603ee      	defb 	$D6,$42,$E6,$03,$EE
   252   000674 43f625fe8c      	defb 	$43,$F6,$25,$FE,$8C
   253   000679 0408930110      	defb 	$04,$08,$93,$01,$10
   254   00067e 10189daf22      	defb 	$10,$18,$9D,$AF,$22
   255   000683 a2fa2aa2a7      	defb 	$A2,$FA,$2A,$A2,$A7
   256   000688 32a27a3aa2      	defb 	$32,$A2,$7A,$3A,$A2
   257   00068d 03c31ccd85      	defb 	$03,$C3,$1C,$CD,$85
   258   000692 97d3aa79db      	defb 	$97,$D3,$AA,$79,$DB
   259   000697 9b5fe3930e      	defb 	$9B,$5F,$E3,$93,$0E
   260   00069c e99c05eb93      	defb 	$E9,$9C,$05,$EB,$93
   261   0006a1 dff9a2ffc0      	defb 	$DF,$F9,$A2,$FF,$C0
   262   0006a6 b640a2fff8      	defb 	$B6,$40,$A2,$FF,$F8
   263   0006ab 7680028801      	defb 	$76,$80,$02,$88,$01
   264   0006b0 98bc069042      	defb 	$98,$BC,$06,$90,$42
   265   0006b5 a003a843b0      	defb 	$A0,$03,$A8,$43,$B0
   266   0006ba 25b88cffc7      	defb 	$25,$B8,$8C,$FF,$C7
   267   0006bf 0b0416058e      	defb 	$0B,$04,$16,$05,$8E
   268   0006c4 b206a220c0      	defb 	$B2,$06,$A2,$20,$C0
   269   0006c9 b023c21cc4      	defb 	$B0,$23,$C2,$1C,$C4
   270   0006ce 8510c7bbff      	defb 	$85,$10,$C7,$BB,$FF
   271   0006d3 cfd301a20d      	defb 	$CF,$D3,$01,$A2,$0D
   272   0006d8 03160b8efd      	defb 	$03,$16,$0B,$8E,$FD
   273   0006dd 098260c12b      	defb 	$09,$82,$60,$C1,$2B
   274   0006e2 c5acffe721      	defb 	$C5,$AC,$FF,$E7,$21
   275   0006e7 209dffefe7      	defb 	$20,$9D,$FF,$EF,$E7
   276   0006ec 02a27e0aa2      	defb 	$02,$A2,$7E,$0A,$A2
   277                          
   278                          
   279   0006f1 ff0044          .GROUP3	defb 	$FF,$00,$44
   280   0006f4 23452f4d2e      	defb 	$23,$45,$2F,$4D,$2E
   281   0006f9 4e0067396f      	defb 	$4E,$00,$67,$39,$6F
   282   0006fe 3470007100      	defb 	$34,$70,$00,$71,$00
   283   000703 a021a10aa2      	defb 	$A0,$21,$A1,$0A,$A2
   284   000708 1aa329a81f      	defb 	$1A,$A3,$29,$A8,$1F
   285   00070d a908aa18ab      	defb 	$A9,$08,$AA,$18,$AB
   286   000712 28b020b109      	defb 	$28,$B0,$20,$B1,$09
   287   000717 b219b327b8      	defb 	$B2,$19,$B3,$27,$B8
   288   00071c 1eb907ba17      	defb 	$1E,$B9,$07,$BA,$17
   289   000721 bba6ffc7b8      	defb 	$BB,$A6,$FF,$C7,$B8
   290   000726 409b8b41aa      	defb 	$40,$9B,$8B,$41,$AA
   291   00072b ffcffd423c      	defb 	$FF,$CF,$FD,$42,$3C
   292   000730 4a81ad43a2      	defb 	$4A,$81,$AD,$43,$A2
   293   000735 da4ba2ffe7      	defb 	$DA,$4B,$A2,$FF,$E7
   294   00073a 404695fff7      	defb 	$40,$46,$95,$FF,$F7
   295   00073f c747a27c57      	defb 	$C7,$47,$A2,$7C,$57
   296   000744 a2ff00          	defb 	$A2,$FF,$00
   297                          
   298                          ;_______________
   299                          
   300   000747 bf              .MONICS	defb 	$BF
   301   000748 4144c3          	defb 	'A','D','C'+$80   	; ADC
   302   00074b 4144c4          	defb 	'A','D','D'+$80   	; ADD
   303   00074e 414ec4          	defb 	'A','N','D'+$80   	; AND
   304   000751 4249d4          	defb 	'B','I','T'+$80   	; BIT
   305   000754 43414ccc        	defb 	'C','A','L','L'+$80	; CALL
   306   000758 4343c6          	defb 	'C','C','F'+$80   	; CCF
   307   00075b 435044d2        	defb 	'C','P','D','R'+$80	; CPDR
   308   00075f 4350c4          	defb 	'C','P','D'+$80   	; CPD
   309   000762 435049d2        	defb 	'C','P','I','R'+$80	; CPIR
   310   000766 4350c9          	defb 	'C','P','I'+$80   	; CPI
   311   000769 4350cc          	defb 	'C','P','L'+$80   	; CPL
   312   00076c 43d0            	defb 	'C','P'+$80      	; CP
   313   00076e 4441c1          	defb 	'D','A','A'+$80   	; DAA
   314   000771 4445c3          	defb 	'D','E','C'+$80   	; DEC
   315   000774 44c9            	defb 	'D','I'+$80      	; DI
   316   000776 444a4eda        	defb 	'D','J','N','Z'+$80	; DJNZ
   317   00077a 45c9            	defb 	'E','I'+$80      	; EI
   318   00077c 4558d8          	defb 	'E','X','X'+$80   	; EXX
   319   00077f 45d8            	defb 	'E','X'+$80      	; EX
   320   000781 48414cd4        	defb 	'H','A','L','T'+$80	; HALT
   321   000785 49cd            	defb 	'I','M'+$80      	; IM
   322   000787 494ec3          	defb 	'I','N','C'+$80   	; INC
   323   00078a 494e44d2        	defb 	'I','N','D','R'+$80	; INDR
   324   00078e 494ec4          	defb 	'I','N','D'+$80   	; IND
   325   000791 494e49d2        	defb 	'I','N','I','R'+$80	; INIR
   326   000795 494ec9          	defb 	'I','N','I'+$80   	; INI
   327   000798 49ce            	defb 	'I','N'+$80      	; IN
   328   00079a 4ad0            	defb 	'J','P'+$80      	; JP
   329   00079c 4ad2            	defb 	'J','R'+$80      	; JR
   330   00079e 4c4444d2        	defb 	'L','D','D','R'+$80	; LDDR
   331   0007a2 4c44c4          	defb 	'L','D','D'+$80   	; LDD
   332   0007a5 4c4449d2        	defb 	'L','D','I','R'+$80	; LDIR
   333   0007a9 4c44c9          	defb 	'L','D','I'+$80   	; LDI
   334   0007ac 4cc4            	defb 	'L','D'+$80      	; LD
   335   0007ae 4e45c7          	defb 	'N','E','G'+$80   	; NEG
   336   0007b1 4e4fd0          	defb 	'N','O','P'+$80   	; NOP
   337   0007b4 4fd2            	defb 	'O','R'+$80      	; OR
   338   0007b6 4f5444d2        	defb 	'O','T','D','R'+$80	; OTDR
   339   0007ba 4f5449d2        	defb 	'O','T','I','R'+$80	; OTIR
   340   0007be 4f5554c4        	defb 	'O','U','T','D'+$80	; OUTD
   341   0007c2 4f5554c9        	defb 	'O','U','T','I'+$80	; OUTI
   342   0007c6 4f55d4          	defb 	'O','U','T'+$80   	; OUT
   343   0007c9 504fd0          	defb 	'P','O','P'+$80   	; POP
   344   0007cc 505553c8        	defb 	'P','U','S','H'+$80	; PUSH
   345   0007d0 5245d3          	defb 	'R','E','S'+$80   	; RES
   346   0007d3 524554c9        	defb 	'R','E','T','I'+$80	; RETI
   347   0007d7 524554ce        	defb 	'R','E','T','N'+$80	; RETN
   348   0007db 5245d4          	defb 	'R','E','T'+$80   	; RET
   349   0007de 524cc1          	defb 	'R','L','A'+$80   	; RLA
   350   0007e1 524c43c1        	defb 	'R','L','C','A'+$80	; RLCA
   351   0007e5 524cc3          	defb 	'R','L','C'+$80   	; RLC
   352   0007e8 524cc4          	defb 	'R','L','D'+$80   	; RLD
   353   0007eb 52cc            	defb 	'R','L'+$80      	; RL
   354   0007ed 5252c1          	defb 	'R','R','A'+$80   	; RRA
   355   0007f0 525243c1        	defb 	'R','R','C','A'+$80	; RA
   356   0007f4 5252c3          	defb 	'R','R','C'+$80   	; RRC
   357   0007f7 5252c4          	defb 	'R','R','D'+$80   	; RRD
   358   0007fa 52d2            	defb 	'R','R'+$80      	; RR
   359   0007fc 5253d4          	defb 	'R','S','T'+$80   	; RST
   360   0007ff 5342c3          	defb 	'S','B','C'+$80   	; SBC
   361   000802 5343c6          	defb 	'S','C','F'+$80   	; SCF
   362   000805 5345d4          	defb 	'S','E','T'+$80   	; SET
   363   000808 534cc1          	defb 	'S','L','A'+$80   	; SLA
   364   00080b 5352c1          	defb 	'S','R','A'+$80   	; SRA
   365   00080e 5352cc          	defb 	'S','R','L'+$80   	; SRL
   366   000811 5355c2          	defb 	'S','U','B'+$80   	; SUB
   367   000814 584fd2          	defb 	'X','O','R'+$80   	; XOR
   368                          
   369                          
   370                          
   371                          ;*****************
   372                          
   373   000817 1012            .OPRND1	DJNZ 	CONDIT
   374                          
   375   000819 e638            .RSTADR	AND 	$38
   376   00081b 182a                   	JR 	DA
   377                          
   378   00081d 101d            .OPRND2	DJNZ 	DAT8
   379                          
   380   00081f cd7c09          .RELADR	CALL 	FETCH
   381   000822 4f                     	LD 	C,A
   382   000823 17                     	RLA
   383   000824 9f                     	SBC 	A,A
   384   000825 47                     	LD 	B,A
   385   000826 eb                     	EX 	DE,HL
   386   000827 e5                     	PUSH 	HL
   387   000828 09                     	ADD 	HL,BC
   388   000829 182d                   	JR 	DHL
   389                          
   390   00082b 1f              .CONDIT	RRA
   391   00082c 1f                     	RRA
   392   00082d 1f                     	RRA
   393   00082e 1013                   	DJNZ 	BITNUM
   394                          
   395   000830 cb67                   	BIT 	4,A
   396   000832 2002                   	JR 	NZ,ABS
   397                          
   398   000834 e603                   	AND 	3
   399                          
   400   000836 e607            .ABS   	AND 	7
   401   000838 c614                   	ADD 	A,$14
   402   00083a 1836                   	JR 	PS1
   403                          
   404   00083c 100d            .DAT8  	DJNZ 	DAT16
   405                          
   406   00083e cd7c09          .D8    	CALL 	FETCH
   407   000841 1804                   	JR 	DA
   408                          
   409   000843 1027            .BITNUM	DJNZ 	INTMOD
   410   000845 e607                   	AND 	7
   411                          
   412   000847 4f              .DA    	LD 	C,A
   413   000848 97                     	SUB 	A
   414   000849 1809                   	JR 	DAC
   415                          
   416   00084b 1038            .DAT16 	DJNZ 	EXAF
   417                          
   418   00084d cd7c09          .D16   	CALL 	FETCH
   419   000850 4f                     	LD 	C,A
   420   000851 cd7c09                 	CALL 	FETCH
   421                          
   422   000854 eb              .DAC   	EX 	DE,HL
   423   000855 e5                     	PUSH 	HL
   424   000856 67                     	LD 	H,A
   425   000857 69                     	LD 	L,C
   426                          
   427   000858 0ef8            .DHL   	LD 	C,$F8
   428   00085a e5                     	PUSH 	HL
   429   00085b cd4709                 	CALL 	CONVHL
   430   00085e e1                     	POP 	HL
   431   00085f 010a00                 	LD 	BC,$000A
   432   000862 b7                     	OR 	A
   433   000863 ed42                   	SBC 	HL,BC
   434   000865 e1                     	POP 	HL
   435   000866 eb                     	EX 	DE,HL
   436   000867 d8                     	RET 	C
   437                          
   438   000868 3648                   	LD 	(HL),'H'
   439   00086a 23                     	INC 	HL
   440   00086b c9                     	RET
   441                          
   442                          
   443   00086c 1006            .INTMOD	DJNZ 	STKTOP
   444   00086e e603                   	AND 	3
   445   000870 c61c                   	ADD 	A,$1C
   446                          
   447   000872 1852            .PS1   	JR 	PS3
   448                          
   449   000874 0e13            .STKTOP	LD 	C,$13
   450   000876 05                     	DEC 	B
   451   000877 284c                   	JR 	Z,PS2
   452                          
   453   000879 1042            .REG16P	DJNZ 	COMMON
   454   00087b 1f                     	RRA
   455   00087c e603                   	AND 	3
   456   00087e fe03                   	CP 	3
   457   000880 2068                   	JR 	NZ,RX
   458                          
   459   000882 3d                     	DEC 	A
   460   000883 1869                   	JR 	RNX
   461                          
   462   000885 0e0a            .EXAF  	LD 	C,$0A
   463   000887 05                     	DEC 	B
   464   000888 283b                   	JR 	Z,PS2
   465                          
   466   00088a 0c              .EXDE  	INC 	C
   467   00088b 05                     	DEC 	B
   468   00088c 2837                   	JR 	Z,PS2
   469                          
   470   00088e 102a            .REG8S 	DJNZ 	ACCUM
   471                          
   472   000890 e607            .R8    	AND 	7
   473   000892 fe06                   	CP 	6
   474   000894 2030                   	JR 	NZ,PS3
   475                          
   476   000896 3628                   	LD 	(HL),'('
   477   000898 23                     	INC 	HL
   478   000899 cdfe08                 	CALL 	REGX
   479   00089c dd7e02                 	LD 	A,(IX+2)
   480   00089f b7                     	OR 	A
   481   0008a0 2858                   	JR 	Z,RP
   482                          
   483   0008a2 362b                   	LD 	(HL),43 		;+
   484   0008a4 07                     	RLCA
   485   0008a5 0f                     	RRCA
   486   0008a6 3004                   	JR 	NC,POS
   487                          
   488   0008a8 362d                   	LD 	(HL),45			;-
   489   0008aa ed44                   	NEG
   490                          
   491   0008ac 23              .POS   	INC 	HL
   492   0008ad eb                     	EX 	DE,HL
   493   0008ae e5                     	PUSH 	HL
   494   0008af 60                     	LD 	H,B
   495   0008b0 6f                     	LD 	L,A
   496   0008b1 0efb                   	LD 	C,$FB
   497   0008b3 cd4709                 	CALL 	CONVHL
   498   0008b6 e1                     	POP 	HL
   499   0008b7 eb                     	EX 	DE,HL
   500   0008b8 1840                   	JR 	RP
   501                          
   502   0008ba 1f              .ACCUM 	RRA
   503   0008bb 1f                     	RRA
   504   0008bc 1f                     	RRA
   505                          
   506   0008bd 0e07            .COMMON	LD 	C,7
   507   0008bf 05                     	DEC 	B
   508   0008c0 2803                   	JR 	Z,PS2
   509                          
   510   0008c2 0d              .PORTC 	DEC 	C
   511   0008c3 1003                   	DJNZ 	IDAT8
   512                          
   513   0008c5 79              .PS2   	LD 	A,C
   514   0008c6 183b            .PS3   	JR 	PS4
   515                          
   516   0008c8 1008            .IDAT8 	DJNZ 	IDAT16
   517   0008ca 3628                   	LD 	(HL),'('
   518   0008cc 23                     	INC 	HL
   519   0008cd cd3e08                 	CALL 	D8
   520   0008d0 1828                   	JR 	RP
   521                          
   522   0008d2 1008            .IDAT16	DJNZ 	REG8
   523   0008d4 3628                   	LD 	(HL),'('
   524   0008d6 23                     	INC 	HL
   525   0008d7 cd4d08                 	CALL 	D16
   526   0008da 181e                   	JR 	RP
   527                          
   528   0008dc 05              .REG8  	DEC 	B
   529   0008dd 28b1                   	JR 	Z,R8
   530                          
   531   0008df 1004            .IPAREF 	DJNZ 	REG16
   532   0008e1 e609                   	AND 	9
   533   0008e3 181e                   	JR 	PS4
   534                          
   535   0008e5 1f              .REG16 	RRA
   536   0008e6 100a                   	DJNZ 	IREG16
   537                          
   538   0008e8 e603            .R16   	AND 	3
   539   0008ea fe02            .RX    	CP  	2
   540   0008ec 2810                   	JR 	Z,REGX
   541                          
   542   0008ee c60c            .RNX   	ADD 	A,$0C
   543   0008f0 1811                   	JR 	PS4
   544                          
   545   0008f2 100a            .IREG16	DJNZ 	REGX
   546   0008f4 3628                   	LD 	(HL),'('
   547   0008f6 23                     	INC 	HL
   548   0008f7 cde808                 	CALL 	R16
   549                          
   550   0008fa 3629            .RP    	LD 	(HL),')'
   551   0008fc 23                     	INC 	HL
   552   0008fd c9                     	RET
   553                          
   554   0008fe dd7e01          .REGX  	LD 	A,(IX+1)
   555   000901 c610                   	ADD 	A,$10
   556                          
   557   000903 eb              .PS4   	EX 	DE,HL
   558   000904 e5                     	PUSH 	HL
   559   000905 210e09                 	LD 	HL,RGSTRS
   560   000908 cd6709                 	CALL 	XTRACT
   561   00090b e1                     	POP 	HL
   562   00090c eb                     	EX 	DE,HL
   563   00090d c9                     	RET
   564                          
   565                          ;*************
   566                          
   567   00090e c2              .RGSTRS	defb 	'B'				+$80
   568   00090f c3              	defb 	'C'       			+$80
   569   000910 c4              	defb 	'D'       			+$80
   570   000911 c5              	defb 	'E'       			+$80
   571   000912 c8              	defb 	'H'       			+$80
   572   000913 cc              	defb 	'L'       			+$80
   573   000914 2843a9          	defb 	'(','C',')' 			+$80
   574   000917 c1              	defb 	'A'       			+$80
   575   000918 c9              	defb 	'I'       			+$80
   576   000919 d2              	defb 	'R'       			+$80
   577   00091a 41462c4146a7    	defb 	'A','F',',','A','F','\''	+$80
   578   000920 44452c48cc      	defb 	'D','E',',','H','L'    		+$80
   579   000925 42c3            	defb 	'B','C'             		+$80
   580   000927 44c5            	defb 	'D','E'             		+$80
   581   000929 41c6            	defb 	'A','F'             		+$80
   582   00092b 53d0            	defb 	'S','P'             		+$80
   583   00092d 48cc            	defb 	'H','L'             		+$80
   584   00092f 49d8            	defb 	'I','X'             		+$80
   585   000931 49d9            	defb 	'I','Y'             		+$80
   586   000933 285350a9        	defb 	'(','S','P',')'       		+$80
   587   000937 4eda            	defb 	'N','Z'             		+$80
   588   000939 da              	defb 	'Z'                		+$80
   589   00093a 4ec3            	defb 	'N','C'             		+$80
   590   00093c c3              	defb 	'C'                		+$80
   591   00093d 50cf            	defb 	'P','O'             		+$80
   592   00093f 50c5            	defb 	'P','E'             		+$80
   593   000941 d0              	defb 	'P'                		+$80
   594   000942 cd              	defb 	'M'                		+$80
   595   000943 b0              	defb 	'0'    				+$80
   596   000944 bf              	defb 	'?'    				+$80
   597   000945 b1              	defb 	'1'    				+$80
   598   000946 b2              	defb 	'2'    				+$80
   599                          
   600                          ;********************
   601                          
   602   000947 97              .CONVHL	SUB 	A
   603                          
   604   000948 f5              .CVHL1 	PUSH 	AF
   605   000949 97                     	SUB 	A
   606   00094a 0610                   	LD 	B,16
   607                          
   608   00094c 81              .CVHL2 	ADD 	A,C
   609   00094d 3801                   	JR 	C,CVHL3
   610   00094f 91                     	SUB 	C
   611                          
   612   000950 ed6a            .CVHL3 	ADC 	HL,HL
   613   000952 17                     	RLA
   614   000953 10f7                   	DJNZ 	CVHL2
   615                          
   616   000955 20f1                   	JR 	NZ,CVHL1
   617                          
   618   000957 fe0a                   	CP 	10
   619   000959 04                     	INC 	B
   620   00095a 30ec                   	JR 	NC,CVHL1
   621                          
   622   00095c fe0a            .CVHL4 	CP 	10
   623   00095e de69                   	SBC 	A,$69
   624   000960 27                     	DAA
   625   000961 12                     	LD 	(DE),A
   626   000962 13                     	INC 	DE
   627   000963 f1                     	POP 	AF
   628   000964 20f6                   	JR 	NZ,CVHL4
   629                          
   630   000966 c9                     	RET
   631                          
   632                          ;****************
   633                          
   634   000967 b7              .XTRACT	OR 	A
   635   000968 2808                   	JR 	Z,COPY
   636                          
   637   00096a cb7e            .SKIP  	BIT 	7,(HL)
   638   00096c 23                     	INC 	HL
   639   00096d 28fb                   	JR 	Z,SKIP
   640                          
   641   00096f 3d                     	DEC 	A
   642   000970 20f8                   	JR 	NZ,SKIP
   643                          
   644   000972 7e              .COPY  	LD 	A,(HL)
   645   000973 07                     	RLCA
   646   000974 cb3f                   	SRL 	A
   647   000976 12                     	LD 	(DE),A
   648                          
   649   000977 13                     	INC 	DE
   650   000978 23                     	INC 	HL
   651   000979 30f7                   	JR 	NC,COPY
   652                          
   653   00097b c9                     	RET
   654                          
   655                          ;*******************
   656                          
   657   00097c 1a              .FETCH 	LD 	A,(DE)
   658   00097d 13                     	INC 	DE
   659   00097e dd3400                 	INC 	(IX+0)
   660   000981 f5                     	PUSH 	AF
   661   000982 cd8c09                 	CALL 	BYTSP
   662   000985 f1                     	POP 	AF
   663   000986 c9                     	RET
   664                          
   665   000987 7a              .ADRSP 	LD 	A,D
   666   000988 cd9309                 	CALL 	BYTOP
   667   00098b 7b                     	LD 	A,E
   668                          
   669   00098c cd9309          .BYTSP 	CALL 	BYTOP
   670   00098f 3e20                   	LD 	A,$20
   671   000991 1810                   	JR 	CHROP
   672                          
   673   000993 f5              .BYTOP 	PUSH 	AF
   674   000994 1f                     	RRA
   675   000995 1f                     	RRA
   676   000996 1f                     	RRA
   677   000997 1f                     	RRA
   678   000998 cd9c09                 	CALL 	HEXOP
   679   00099b f1                     	POP 	AF
   680                          
   681   00099c e60f            .HEXOP 	AND 	$0F
   682   00099e fe0a                   	CP 	10
   683   0009a0 de69                   	SBC 	A,$69
   684   0009a2 27                     	DAA
   685                          
   686                          ; -----------------------------------
   687                          ;
   688                          ; End of John Kerr's DIS-Z80 routine.
   689                          ;
   690                          ; The next routine outputs a character.
   691                          ;
   692                          ; -------------------------------------
   693   0009a3 c34801          .CHROP		jp	putchar
   694                          
   695                          ;.CHROP 	PUSH 	HL
   696                          ;       	PUSH 	DE
   697                          ;       	PUSH 	BC
   698                          ;
   699                          ;	ld	c, a
   700                          ;	call	conout
   701                          ;
   702                          ;;	ld	h,0
   703                          ;;	ld	l,a
   704                          ;;	push	hl		; parameter passing
   705                          ;;      	call 	fputc_cons	; This calls the Z88DK "put char" function
   706                          ;;	pop	hl
   707                          ;
   708                          ;       	POP 	BC
   709                          ;       	POP 	DE
   710                          ;       	POP 	HL
   711                          ;
   712                          ;       	RET
   713                          
   714                          
   715                          
sallytest.asm:
   446                          
rollitest.asm:
   414                          
